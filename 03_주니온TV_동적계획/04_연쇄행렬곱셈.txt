연쇄 행렬 곱셈 문제
    - 주어진 n개의 연쇄 행렬을 곱하는 최적의 순서를 구하시오.
        - n개의 연쇄 행렬 곱셈: A1 * A2 * ... * An
        - 행렬 곱셈은 결합 법칙이 성립: (Ax * Ay) * Az = Ax * (Ay * Az)
        - 하지만, 행렬 곱셈의 순서에 따라서 각 원소의 곱셈 횟수가 달라짐
        - 각 원소의 곱셈 횟수가 가장 작아지도록 하는 고셈 순서가 최적의 순서

    - 연쇄 행렬 곱셈 문제는 최적화 문제
        - 원소의 곱셈 횟수를 최소화하는 행렬 곱셈의 순서 찾기

연쇄 행렬 곱셈 문제의 이해
    - 2 * 3 행렬과 3 * 4 행렬을 곱하면 2 * 4 행렬이 나옴
        - 1.4: 원소를 곱하는 횟수는 2*3*4 = 24
    
    - 일반적으로, i*k 행렬과 k*j행렬을 곱하면 i*j행렬이 나옴
        - 원소 곱셈의 횟수: i*k*j

연쇄 행렬 곱셈: 단순무식하게 풀기(Brute-Force Approach)
    - 모든 경우의 수에 대해서 계산해 보고 최적의 순서를 선택

    - 연쇄 행렬 곱셈에서 가능한 경우의 수는?
        - 카탈란 수: C(n) = ????????????????
        - 연쇄 행렬 곱셈이 가지는 경우의 수 = C(n-1)
            - n개의 항에 괄호를 씌우는 모든 경우의 수(n = 1,2,3, ...)
    
    - 즉, 지수 시간 복잡도
    (20*2) * (2*30) * (30*12) * (12*8) 4가지 행렬 곱셈
    = A * B * C * D
    - 연쇄 행렬이 4개일 경우 다섯가지 경우의 수가 존재
        - A(B(CD)) = 3,680
        - (AB)(CD) = 8,880
        - A((BC)D) = 1,232
        - ((AB)C)D) = 10,320
        - (A(BC))D = 3,120
    - 모든 가짓수를 구해서 제일 적은 것을 찾으려다보니, C(n-1) ~ n^4
    - 지수 시간 복잡도다.

연쇄 행렬 곱셈 문제의 엄밀한 정의
    - n개의 연쇄 행렬 곱셈: A1 * A2 * ... * An
    - Ak-1의 행의 개수와 Ak의 열의 개수와 같아야 함
    - dk를 행렬 Ak의 행의 개수로 정함(1<=k<=n)
    - dk-1은 행렬 Ak의 열의 개수, Ak-1의 행의 개수임
    - d0는 A1의 열의 개수

연쇄 행렬 곱셈: 동적계획(Dynamic Programming) (3.6)
    - 1단계: 재귀 관계식을 찾는다.
        - M: 연쇄 행렬을 곱하는데 필요한 곱셈의 최소 횟수 행렬
        - M[i][j]: Ai에서 Aj까지 행렬을 곱하는데 필요한 곱셈의 최소 횟수 (1<=i<=k<=n)
        - 목표: Ai ... Aj 행렬을 (Ai...Ak)(Ak+1...Aj)로 분할하는 재귀 관계식 찾기
    - 2단계: 상향식 방법으로 해답을 구한다.
        - 초기화: M[i][j] = 0
        - 최종 목표: M[1][n]
        - 상향식 계산: 대각선 1번, 대각선 2번, ... , 대각선 n-1번

연쇄 행렬 곱셈의 재귀 관계식 구하기
    - 분할정복(Divide-and-Conquer)
        - n개의 행렬을 두 개의 최적 부분행렬의 곱으로 분할
    - 예를 들어, A1 A2 A3 A4 A5 A6은 다음과 같이 분할 가능

        (A1)(A2 A3 A4 A5 A6): k = 1
        (A1 A2)(A3 A4 A5 A6): k = 2
        (A1 A2 A3)(A4 A5 A6): k = 3
        (A1 A2 A3 A4)(A5 A6): k = 4
        (A1 A2 A3 A4 A5)(A6): k = 5

    - 각 분할의 곱셈 횟수:
        - 각 부분행렬의 곱셈 횟수 + 두 행렬의 곱셈 횟수
        - M[1][k] + M[k+1][6] + d0*dk*d6

    - 최적 분할:
        - M[1][6] = minimum(M[1][k] + M[k+1][6] + d0*dk*d6)
                    i<=k<=j-1

연쇄 행렬 곱셈의 재귀 관계식
    - For i<=i<=j<=n,
        - if i = j, M[i][j] = 0
        - if i < j, M[i][j] = minimum(M[i][k] + M[k+1][j] + di-1*dk*dj)
                              i<=k<=j-1

그러면... 곱셈 순서는 어떻게 출력하지? (3.7)
    - P[i][j] = k 이면 (Ai ... Ak)(Ak+1 ... Aj)로 분할
    - 재귀 호출: 분할정복!
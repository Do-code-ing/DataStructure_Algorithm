탐욕 알고리즘: The Greedy Approach
    - 최종 해답을 찾기 위해서 각 단계마다 한의 답을 고름
    - 각 단계에서 답을 고를 때 가장 좋아 보이는 답을 선택
    - 최적화 문제에서,
        - 선택할 당시에는 최적의 답을 고르지만
        - 최종 해답이 반드시 최적임을 보장하지 않음

동전의 거스름돈 문제
    - 거스름돈이 870원인 경우,
    - 동전의 개수가 최소가 되도록 동전을 선택하는 방법은?

거스름돈 문제: 탐욕법으로 풀기
    while (동전이 남아있고 문제가 미해결):
        가장 가치가 높은 동전을 선택한다.
        if (동전을 더하여 거스름돈의 총액이 거슬러주어야 할 액수를 초과):
            동전을 도로 집어 넣는다.
        else:
            거스름돈에 동전을 포함시킨다.
        if (거스름 돈의 총액이 거슬러주어야 할 액수와 같다)
            문제 해결

거스름돈 알고리즘은 항상 최적해를 찾는가?
    - 동전의 구성이 [500, 100, 50, 10, 5, 1]일 경우 Yes!
    - 동전의 구성이 [500, 100, 80, 50, 10, 5, 1]일 경우 No!

    - 예) 거스름돈 360원의 최적해는?
        - 탐욕 알고리즘의 해: [100, 100, 100, 50, 10]
        - 최적해: [100, 100, 80, 80]

탐욕 알고리즘의 이모저모
    - 탐욕 알고리즘의 설계 전략: 공집합에서 시작
        - 선택 과정: 집합에 추가할 다음 최적의 원소를 고른다.
        - 적절성 검사: 새로운 집합이 해답으로 적절한지 검사한다.
        - 해답 점검: 새로운 집합이 문제의 해답인지 판단한다.
    - 탐욕 알고리즘의 장단점:
        - 장점: 상대적으로 설계하기가 매우 쉽다.
        - 단점: 최적화 문제에서 반드시 정확성을 증명해야 한다.

최소비용 신장트리 문제
    - 문제: 주어진 그래프에서 최소비용 신장트리를 구하시오.

    - 엄밀한 문제 정의
        - 주어진 그래프: G = (V, E)
            - 그래프 G는 모든 정점이 연결된 가중치가 있는 무방향 그래프
        - 신장트리(spanning tree): G의 부분 그래프 T = (V, F), F는 E의 부분집합이다.
            - 그래프 G의 모든 정점을 연결하는 트리: 간선의 개수는 n-1
        - 최소비용 신장트리(MST: Minimum cost Spanning Tree)
            - 모든 신장트리 T중에서 가중치의 합이 최소가 되는 신장트리

최소비용 신장트리 문제의 이해
    - 단순무식하게 풀기
        - 모든 신장트리를 찾아서 가중치의 합이 가장 작은 것을 선택
    - 신장트리 찾는 법
        - 간선의 개수가 (n-1)인 연결된 트리가 될 때까지 간선을 하나씩 제거

최소비용 신장트리: Greedy
    - 1단계(초기화): 해답 집합을 공집합으로 둔다.
        - 간선 집합 E의 부분 집합 F를 공집합으로 둔다.
    - 2단계(선택): 최적의 원소 하나를 해답의 집합에 포함시킨다.
        - E에서 최적의 간선 하나를 추출해서 F에 포함시킨다.
        - 최적을 선택하는 방법? 프림 vs 크루스칼
    - 3단계(검사): 해당 집합이 최종이면 종료, 아니면 2단계를 반복한다.
        - 간선의 부분 집합 F의 원소 개수가 n-1이면 최종 해답

최소비용 신장트리: 프림 알고리즘(Prim's Algorithm) (4.1)
    - 1단계(초기화): 해답의 집합을 공집합으로 둔다.
        - F는 공집합, Y = {v1}: Y는 정점의 집합 V의 부분 집합
    - 2단계(선택): 최적의 원소 하나를 해답의 집합에 포함시킨다.
        - V - Y 집합에서 Y집합에서 가장 가까운 정점 vnear를 선택
        - Y집합에 vnear를 추가, F집합에 (nearest(vnear), vnear)를 추가
    - 3단계(검사):
        - Y = V: Y집합이 V집합의 모든 원소를 포함하면 종료
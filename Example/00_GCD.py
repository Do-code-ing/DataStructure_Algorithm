# 인류 최초의 알고리즘 :
# 최대공약수(GCD) 계산 알고리즘
# gcd(8, 12) = max{1, 2, 4} = 4
# 유클리드 :
# 두 정수 중 큰 값에서 작은 값을 뺀 것을 정수 a라 칭하고 기존 작은 값을 b라 칭할 때,
# 다시 두 정수 a, b 중 큰 값에서 작은 값을 빼는 것을 두 정수 a, b 중 하나가 0이 될 때 까지 반복할 때,
# a + b는 두 수의 최대공약수가 된다.

# 코드로 만들면 다음과 같다.
def gcd1(a, b):
    while a != 0 and b != 0:
        if a > b:
            a = a-b
        else:
            b = b-a
    return a+b

print(gcd1(2,100))
# 2

# 이 함수는 정수 a, b의 차이가 클 수록 많은 반복을 필요로 하는데,
# 단순히 2, 100을 놓고 호출하면 50번의 루프를 통과한다.
# 그래서 매번 뺄셈을 하는 것 보다 나눗셈 후 나머지를 구하는 방식으로 하면 조금 더 효율적이다.

# 조금 더 효율적인 코드는 다음과 같다.
def gcd2(a, b):
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return a+b

print(gcd2(2,100))
# 2

# 마지막으로 재귀법을 사용할 수 있다.
# gcd(a, b%a) if b > a
# gcd(a%b, a) if a > b